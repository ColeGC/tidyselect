% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vars-select.R
\name{vars_select}
\alias{vars_select}
\alias{vars_rename}
\title{Select variables.}
\usage{
vars_select(.vars, ..., .include = character(), .exclude = character())

vars_rename(.vars, ..., .strict = TRUE)
}
\arguments{
\item{.vars}{A character vector of existing column names.}

\item{..., args}{Expressions to compute

These arguments are automatically \link[rlang:quo]{quoted} and
\link[rlang:eval_tidy]{evaluated} in a context where elements of
\code{vars} are objects representing their positions within
\code{vars}. They support \link[rlang:quasiquotation]{unquoting} and
splicing. See \code{vignette("programming")} for an introduction to
these concepts.

Note that except for \code{:}, \code{-} and \code{c()}, all complex expressions
are evaluated outside that context. This is to prevent accidental
matching to \code{vars} elements when you refer to variables from the
calling context.}

\item{.include, .exclude}{Character vector of column names to always
include/exclude.}

\item{.strict}{If \code{TRUE}, will throw an error if you attempt to rename a
variable that doesn't exist.}
}
\value{
A named character vector. Values are existing column names,
names are new names.
}
\description{
These functions power \code{\link[=select]{select()}} and \code{\link[=rename]{rename()}}.
}
\details{
For historic reasons, the \code{vars} and \code{include} arguments are not
prefixed with \code{.}. This means that any argument starting with \code{v}
might partial-match on \code{vars} if it is not explicitly named. Also
\code{...} cannot accept arguments named \code{exclude} or \code{include}. You can
enquose and splice the dots to work around these limitations (see
examples).
}
\examples{
# Keep variables
vars_select(names(iris), everything())
vars_select(names(iris), starts_with("Petal"))
vars_select(names(iris), ends_with("Width"))
vars_select(names(iris), contains("etal"))
vars_select(names(iris), matches(".t."))
vars_select(names(iris), Petal.Length, Petal.Width)
vars_select(names(iris), one_of("Petal.Length", "Petal.Width"))

df <- as.data.frame(matrix(runif(100), nrow = 10))
df <- df[c(3, 4, 7, 1, 9, 8, 5, 2, 6, 10)]
vars_select(names(df), num_range("V", 4:6))

# Drop variables
vars_select(names(iris), -starts_with("Petal"))
vars_select(names(iris), -ends_with("Width"))
vars_select(names(iris), -contains("etal"))
vars_select(names(iris), -matches(".t."))
vars_select(names(iris), -Petal.Length, -Petal.Width)

# Rename variables
vars_select(names(iris), petal_length = Petal.Length)
vars_select(names(iris), petal = starts_with("Petal"))

# Rename variables preserving all existing
vars_rename(names(iris), petal_length = Petal.Length)

# You can unquote names or formulas (or lists of)
vars_select(names(iris), !!! list(quo(Petal.Length)))
vars_select(names(iris), !! quote(Petal.Length))

# The .data pronoun is available:
vars_select(names(mtcars), .data$cyl)
vars_select(names(mtcars), .data$mpg : .data$disp)

# However it isn't available within calls since those are evaluated
# outside of the data context. This would fail if run:
# vars_select(names(mtcars), identical(.data$cyl))


# If you're writing a wrapper around vars_select(), pass the dots
# via splicing to avoid matching dotted arguments to vars_select()
# named arguments (`vars`, `include` and `exclude`):
wrapper <- function(...) {
  vars_select(names(mtcars), !!! quos(...))
}

# This won't partial-match on `vars`:
wrapper(var = cyl)

# This won't match on `include`:
wrapper(include = cyl)


# If your wrapper takes named arguments, you need to capture then
# unquote to pass them to vars_select(). See the vignette on
# programming with dplyr for more on this:
wrapper <- function(var1, var2) {
  vars_select(names(mtcars), !! enquo(var1), !! enquo(var2))
}
wrapper(starts_with("d"), starts_with("c"))
}
\seealso{
\code{\link[=vars_pull]{vars_pull()}}
}
\keyword{internal}
